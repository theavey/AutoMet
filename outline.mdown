This package will define a class that will be useful for setting up and running metadynamics calculations.
Copyright (C) 2017 Thomas John Heavey IV

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

This package will define a class that will be useful for setting up and running metadynamics calculations.

Ideally, this will be as general as possible, but I'll start with running in GROMACS with PLUMED.

### Simulation Class

Setup:

- methods
    - save object state
        - A method that will save the state of the object so that, for example, if a simulation is set up and started,
      but the python kernel is killed, all the parameters and such can be read back in easily for continuation
      or extension, etc.
    - read object state
    - add molecule
        - Looks like the parmed package will be usable here.
      It already has a `Structure` class the includes atoms, residues, bonds, angles, torsions, etc.
      and it can take in and output a wide away of formats which is ideal.
    - combine molecules
        - This would involve ensuring no clashes, possibly arranging, and combining parameter inputs
    - add solvent
    - save molecule(s)
        - Write appropriate geometry and parameter files.
        - This will be necessary to start simulations.
    - define CV
    - define restraints
    - create plumed input
    - compile tpr
    - minimize
    - equilibrate
    - log (commands, input and output from MD)
- data
    - Structures
    - restraints
    - CVs
    - executable paths
    - execution parameters


Running:

- methods
    - define restraints
    - define CVs
    - define metad parameters
    - define MD parameters
        - Not sure if there is some general way to do this.
        - Ideally, it could just set any parameter by changing the default in some template file.
        - An extension (with a lot of work) could be to even check validity of this.
        - Likely easiest (with generality), would be to have a dict of parameters to change,
          scan through template, and change any that have values set in the dict.
        - [ ] check on how GromacsWrapper does this.
          - set length
          - set log frequency and style
          - set temp
          - set others?
    - compile TPR
    - create plumed input
    - run metad
    - check status
    - extend job
    - resume job
    - redo
    - log
- data
    - starting geom
    - trajectory (MDAnalysis.Universe likely)
    - restraints
    - CVs
    - MD parameters
    - status of job
        - done
        - running
        - not running or done
        - not started
    - file names
        - starting geom
        - mdp
        - tpr
        - output files from GROMACS
        - output files from PLUMED
        - PLUMED input

Analysis:

A lot of this might need to be specialized, so easy access to MDAnalysis interface might be helpful

- methods
    - sum hills
    - make FES
        - make 1d fes
        - make 2d fes
- data
    - trajectory
    - file names


### Molecule Class

